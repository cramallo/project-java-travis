buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'de.aaschmid:gradle-cpd-plugin:2.0'
		//classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.8'
	}
}

plugins {
	//id "org.sonarqube" version "2.8"
	id 'org.springframework.boot' version '2.1.6.RELEASE'
	id 'java'
	id 'de.aaschmid.cpd' version '2.0'
	//id 'checkstyle'
}
apply plugin: 'io.spring.dependency-management'
apply plugin: 'jacoco'
//apply plugin: 'checkstyle'
//apply plugin: 'findbugs'
apply plugin: 'pmd'
//apply plugin: 'project-report'
//apply plugin: "org.sonarqube"
apply plugin: de.aaschmid.gradle.plugins.cpd.CpdPlugin

group = 'com.wolox'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

configurations {
	developmentOnly
	runtimeClasspath {
		extendsFrom developmentOnly
	}
}

jacoco{
	toolVersion="0.7.1.201405082137"
}

pmd{
	toolVersion= "6.10.0"
	pmdTest.enabled = true
}

cpd{
	language= 'java'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
	developmentOnly("org.springframework.boot:spring-boot-devtools")
	compile('org.springframework.boot:spring-boot-starter-thymeleaf')
	compile 'org.modelmapper:modelmapper:2.3.0'
	compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
	compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'
	compile 'org.springframework.plugin:spring-plugin-core:1.2.0.RELEASE'
	compile group: 'com.google.guava', name: 'guava', version: '27.0-jre'
	testCompile('com.h2database:h2:1.3.148')
	compile 'com.fasterxml.jackson.core:jackson-databind:2.9.8'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	compile 'org.springframework.security:spring-security-test:4.0.1.RELEASE'
	compile(

			'log4j:log4j:1.2.17'
	)
	implementation 'net.objectlab:qalab:1.0'
//	clover 'org.openclover:clover:4.3.1'
}

jacoco {
	toolVersion = "0.8.5"
}

jacocoTestReport {
	reports {
		xml.enabled true
		csv.enabled = true
		html.enabled = true
	}
}

/*tasks.withType(Checkstyle) {
	reports {
		xml.enabled false
		html.enabled true
		html.stylesheet resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
	}
}*/
/*checkstyle {
	toolVersion = '6.16.1'
	//ignoreFailures = false
	//configFile = file("${rootGradleDir}/static-code-analysis/checkstyle/checkstyle.xml")
}*/

/*findbugs{
	//ignoreFailures=true
	findbugsTest.enabled=false
}*/

pmd {
	toolVersion = "6.19.0"
	ignoreFailures = true
	pmdTest.enabled=false
	ruleSetConfig = rootProject.resources.text.fromFile('etc/pmd/rulset.xml')
}

cpd {
	language = 'java'
	//toolVersion = '6.0.0'
	//skipLexicalErrors = true
	ignoreFailures = true
	minimumTokenCount = 100 // approximately 5-10 lines
}


cpdCheck {
	reports {
		text.enabled = true
		xml.enabled = true
		csv.enabled = true
	}
	ignoreAnnotations = true
	skipLexicalErrors = false
	source = sourceSets.main.allJava
}

test.finalizedBy jacocoTestReport

/*tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}
tasks.withType(Pmd){
	reports{
		xml.enabled=true
		html.enabled=true
	}
}

//copying all dependencies attached to 'compileClasspath' into a specific folder
/*task copyAllDependencies(type: Copy) {
	//referring to the 'compileClasspath' configuration
	from configurations.compileClasspath
	into 'allLibs'
}
*/
//sonarqube {
//	properties {
//		property "sonar.exclusions", "**/*Generated.java"
//	}
//}

//task printDirectDepsTree {
//	Set directDependencies = []
//	Set indirectDependencies = []
//	configurations.each {
//		if(it.isCanBeResolved()){
			//println(it.name)
			//println("++++++++++++++++++++++")
			//println(it.incoming.getResolutionResult().getRoot())
//			it.incoming.getResolutionResult().getAllDependencies().each { depResult ->
				/*println(depResult.toString() + " ")
				println(depResult.getRequested())
				println(depResult.getFrom().toString())
				println(depResult.getFrom().toString().equalsIgnoreCase("project :"))
				println("-----------------------------------------------------")*/
/*				if (depResult.getFrom().toString().equalsIgnoreCase("project :")) {
					directDependencies.add(depResult.toString())
				}else{
					indirectDependencies.add(depResult.toString())
				}
			}
		}
	}
	def directDependenciesMap = [
	        numberOfDirectDependencies : directDependencies.size(),
			directDependencies : directDependencies
	]

	def indirectDependenciesMap = [
	        numberOfIndirectDependencies : indirectDependencies.size(),
			indirectDependencies : indirectDependencies
	]

	File file = new File("directDependencies.json")
	file.write(groovy.json.JsonOutput.toJson(directDependenciesMap))

	File file2 = new File("indirectDependencies.json")
	file2.write(groovy.json.JsonOutput.toJson(indirectDependenciesMap))

}

task runPython(type:Exec) {
	workingDir '/home/cramallo/Desktop/metrics'
	commandLine 'python3', 'metrics.py'
}

test.finalizedBy jacocoTestReport*/